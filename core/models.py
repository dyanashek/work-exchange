import datetime

from django.db import models
from django.db.models import Min, Max, Q, Avg
from django.utils.html import format_html
from django.db.models.signals import post_save
from django.dispatch import receiver
from easy_thumbnails.files import get_thumbnailer
from filer.fields.image import FilerImageField


TARGETS = (
    ('1', '–†–∞–±–æ—Ç–Ω–∏–∫',),
    ('2', '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',),
)


class Text(models.Model):
    slug = models.CharField(verbose_name='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', max_length=100, unique=True)
    rus = models.TextField(verbose_name='–¢–µ–∫—Å—Ç (—Ä—É—Å—Å–∫–∏–π)', max_length=1024, null=True, blank=True)
    heb = models.TextField(verbose_name='–¢–µ–∫—Å—Ç (–∏–≤—Ä–∏—Ç)', max_length=1024, null=True, blank=True)
    my_order = models.PositiveIntegerField(verbose_name='–ü–æ—Ä—è–¥–æ–∫', default=0, blank=False, null=False)

    class Meta:
        verbose_name = '—Ç–µ–∫—Å—Ç'
        verbose_name_plural = '—Ç–µ–∫—Å—Ç—ã'
        ordering = ('my_order',)

    def __str__(self):
        if self.rus:    
            return self.rus
        if self.heb:
            return self.heb
        return self.slug


class Button(models.Model):
    slug = models.CharField(verbose_name='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', max_length=100, unique=True)
    rus = models.CharField(verbose_name='–ö–Ω–æ–ø–∫–∞ (—Ä—É—Å—Å–∫–∏–π)', max_length=100, null=True, blank=True)
    heb = models.CharField(verbose_name='–ö–Ω–æ–ø–∫–∞ (–∏–≤—Ä–∏—Ç)', max_length=100, null=True, blank=True)
    my_order = models.PositiveIntegerField(verbose_name='–ü–æ—Ä—è–¥–æ–∫', default=0, blank=False, null=False)

    class Meta:
        verbose_name = '–∫–Ω–æ–ø–∫–∞'
        verbose_name_plural = '–∫–Ω–æ–ø–∫–∏'
        ordering = ('my_order',)

    def __str__(self):
        if self.rus:    
            return self.rus
        if self.heb:
            return self.heb
        return self.slug


class Occupation(models.Model):
    slug = models.CharField(verbose_name='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', max_length=100, unique=True)
    rus = models.CharField(verbose_name='–ü—Ä–æ—Ñ–µ—Å—Å–∏—è (—Ä—É—Å—Å–∫–∏–π)', max_length=100)
    heb = models.CharField(verbose_name='–ü—Ä–æ—Ñ–µ—Å—Å–∏—è (–∏–≤—Ä–∏—Ç)', max_length=100)
    my_order = models.PositiveIntegerField(verbose_name='–ü–æ—Ä—è–¥–æ–∫', default=0, blank=False, null=False)

    class Meta:
        verbose_name = '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è'
        verbose_name_plural = '–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'
        ordering = ('my_order',)

    def __str__(self):
        return self.rus


class TGUser(models.Model):
    tg_id = models.CharField(verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º id', max_length=100, unique=True)
    target = models.CharField(verbose_name='–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', choices=TARGETS, max_length=10)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)

    class Meta:
        verbose_name = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        verbose_name_plural = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        ordering = ('-created_at',)

    def __str__(self):
        return self.tg_id


class ObjectPhoto(models.Model):
    photo_id = models.CharField(verbose_name='TG id —Ñ–æ—Ç–æ', max_length=200, unique=True)


class Worker(models.Model):
    tg_id = models.CharField(verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º id', max_length=100, unique=True)
    username = models.CharField(verbose_name='–ù–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º', max_length=100, null=True, blank=True)
    name = models.CharField(verbose_name='–ò–º—è', max_length=100, null=True, blank=True)
    phone = models.CharField(verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', max_length=25, null=True, blank=True)
    passport_photo = FilerImageField(verbose_name='–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞', on_delete=models.SET_NULL, null=True, blank=True)
    passport_photo_tg_id = models.CharField(verbose_name='TG id –ø–∞—Å–ø–æ—Ä—Ç–∞', max_length=200, null=True, blank=True)
    occupations = models.ManyToManyField(Occupation, verbose_name='–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏', related_name='users', blank=True)
    about = models.TextField(verbose_name='–û —Å–µ–±–µ', blank=True, null=True)
    about_heb = models.TextField(verbose_name='–û —Å–µ–±–µ (–∏–≤—Ä–∏—Ç)', blank=True, null=True, default=None)
    min_salary = models.PositiveIntegerField(verbose_name='–ó–∞—Ä–ø–ª–∞—Ç–∞ (–æ—Ç ‚Ç™/—á–∞—Å)', default=0)
    objects_photos = models.ManyToManyField(ObjectPhoto, verbose_name='–§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤', related_name='objects_photos', blank=True)
    notifications = models.BooleanField(verbose_name='–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', default=False)
    is_searching = models.BooleanField(verbose_name='–í –ø–æ–∏—Å–∫–∞—Ö —Ä–∞–±–æ—Ç—ã?', default=True)
    is_approved = models.BooleanField(verbose_name='–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω?', default=None, null=True, blank=True)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)

    class Meta:
        verbose_name = '—Ä–∞–±–æ—Ç–Ω–∏–∫'
        verbose_name_plural = '—Ä–∞–±–æ—Ç–Ω–∏–∫–∏'
        ordering = ('-created_at',)

    def __str__(self):
        if self.name:
            return f'{self.tg_id} - {self.name}'
        
        return self.tg_id

    def get_thumbnail(self):
        image = '-'
        if self.passport_photo:
            image = format_html('<img src="{0}"/>', get_thumbnailer(self.passport_photo)['passport_thumbnail'].url)
        return image
    get_thumbnail.allow_tags = True
    get_thumbnail.short_description = u'–ü–∞—Å–ø–æ—Ä—Ç'

    @property
    def readable_rus_occupations(self):
        readable_occupations = ''
        for occupation in self.occupations.all():
            readable_occupations += f'{occupation.rus}, '
        
        readable_occupations = readable_occupations.strip(', ')

        return readable_occupations
    
    @property
    def readable_heb_occupations(self):
        readable_occupations = ''
        for occupation in self.occupations.all():
            readable_occupations += f'{occupation.heb}, '
        
        readable_occupations = readable_occupations.strip(', ')

        return readable_occupations
    
    @property
    def readable_approved_status(self):
        if self.is_approved is None:
            return '‚è≥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'

        if self.is_approved is False:
            return '‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ)'

        if self.is_approved is True:
            return '‚úÖ –æ–¥–æ–±—Ä–µ–Ω'

    @property
    def readable_search_status(self):
        if self.is_searching is True:
            return 'üîç –¥–∞'

        return 'üå¥ –Ω–µ—Ç'
    
    @property
    def readable_notifications_status(self):
        if self.notifications is True:
            return '–≤–∫–ª—é—á–µ–Ω—ã'

        return '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
    
    @property
    def rating_rus(self):
        reviews = self.received_reviews.all()
        if reviews.exists():
            average = reviews.aggregate(Avg('rate'))['rate__avg']
            return f'{round(average, 1)} ‚≠êÔ∏è'
        else:
            return '–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫'
    
    @property
    def rating_heb(self):
        reviews = self.received_reviews.all()
        if reviews.exists():
            average = reviews.aggregate(Avg('rate'))['rate__avg']
            return f'{round(average, 1)} ‚≠êÔ∏è'
        else:
            return '◊ê◊ô◊ü ◊ì◊ô◊®◊ï◊í◊ô◊ù'


class Employer(models.Model):
    tg_id = models.CharField(verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º id', max_length=100, unique=True)
    username = models.CharField(verbose_name='–ù–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º', max_length=100, null=True, blank=True)
    phone = models.CharField(verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', max_length=25, null=True, blank=True)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)

    class Meta:
        verbose_name = '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'
        verbose_name_plural = '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'
        ordering = ('-created_at',)

    def __str__(self):
        return self.tg_id
    
    def _all_offered_occupations(self):
        occupations = []
        for job in self.jobs.filter(Q(is_approved=True) & Q(is_active=True)).all():
            for occupation in job.occupations.all():
                if occupation not in occupations:
                    occupations.append(occupation)
        
        return occupations
    
    @property
    def readable_occupations(self):
        occupations = self._all_offered_occupations()
        readable_occupations = ''
        for occupation in occupations:
            readable_occupations += f'{occupation.rus}, '
        
        if readable_occupations:
            readable_occupations = readable_occupations.strip(', ')
        else:
            readable_occupations = '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π'
        
        return readable_occupations

    @property
    def min_min_salary(self):
        min_salary = self.jobs.filter(Q(is_approved=True) & Q(is_active=True)).aggregate(Min('min_salary'))['min_salary__min']
        if min_salary is None:
            return '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        else:
            return f'{min_salary} ‚Ç™/—á–∞—Å'
    
    @property
    def max_min_salary(self):
        min_salary = self.jobs.filter(Q(is_approved=True) & Q(is_active=True)).aggregate(Max('min_salary'))['min_salary__max']
        if min_salary is None:
            return '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        else:
            return f'{min_salary} ‚Ç™/—á–∞—Å'
    
    @property
    def rating_rus(self):
        reviews = self.received_reviews.all()
        if reviews.exists():
            average = reviews.aggregate(Avg('rate'))['rate__avg']
            return f'{round(average, 1)} ‚≠êÔ∏è'
        else:
            return '–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫'
    
    @property
    def rating_heb(self):
        reviews = self.received_reviews.all()
        if reviews.exists():
            average = reviews.aggregate(Avg('rate'))['rate__avg']
            return f'{round(average, 1)} ‚≠êÔ∏è'
        else:
            return '◊ê◊ô◊ü ◊ì◊ô◊®◊ï◊í◊ô◊ù'
    

class Job(models.Model):
    employer = models.ForeignKey(Employer, verbose_name='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', on_delete=models.CASCADE, related_name='jobs')
    min_salary = models.PositiveIntegerField(verbose_name='–ó–∞—Ä–ø–ª–∞—Ç–∞ (–æ—Ç ‚Ç™/—á–∞—Å)', default=0)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', blank=True, null=True)
    occupations = models.ManyToManyField(Occupation, verbose_name='–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏', related_name='jobs', blank=True)
    description_rus = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)', blank=True, null=True, default=None)
    notifications = models.BooleanField(verbose_name='–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', default=False)
    is_active = models.BooleanField(default=True)
    is_approved = models.BooleanField(default=None, null=True)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)
    updated_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', auto_now=True, null=True)

    class Meta:
        verbose_name = '–≤–∞–∫–∞–Ω—Å–∏—è'
        verbose_name_plural = '–≤–∞–∫–∞–Ω—Å–∏–∏'
        ordering = ('-created_at',)
        
    def __str__(self):
        text = ''
        for occupation in self.occupations.all():
            text += f'{occupation.rus}, '
        
        text = text.rstrip(', ')
        return f'{self.min_salary} ‚Ç™/—á–∞—Å: {text}'
    
    @property
    def readable_notifications_rus_status(self):
        if self.notifications is True:
            return '–≤–∫–ª—é—á–µ–Ω—ã'

        return '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
    
    @property
    def readable_notifications_heb_status(self):
        if self.notifications is True:
            return '◊û◊ï◊§◊¢◊ú'

        return '◊õ◊ë◊ï◊ô'

    @property
    def readable_rus_occupations(self):
        readable_occupations = ''
        for occupation in self.occupations.all():
            readable_occupations += f'{occupation.rus}, '
        
        readable_occupations = readable_occupations.strip(', ')

        return readable_occupations
    
    @property
    def readable_heb_occupations(self):
        readable_occupations = ''
        for occupation in self.occupations.all():
            readable_occupations += f'{occupation.heb}, '
        
        readable_occupations = readable_occupations.strip(', ')

        return readable_occupations

    @property
    def readable_approved_status(self):
        if self.is_approved is None:
            return '‚è≥ ◊ë◊ë◊ì◊ô◊ß◊î'

        if self.is_approved is False:
            return '‚ùå ◊ú◊ê ◊ê◊ï◊©◊®◊î'

        if self.is_approved is True:
            return '‚úÖ ◊ê◊ï◊©◊®◊î'
    
    @property
    def readable_active_status(self):
        if self.is_active is True:
            return '◊õ◊ü'

        if self.is_active is False:
            return '◊ú◊ê'


class WorkerReview(models.Model):
    worker = models.ForeignKey(Worker, verbose_name='–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –æ—Å—Ç–∞–≤–∏–≤—à–∏–π –æ—Ç–∑—ã–≤', related_name='leaved_reviews', on_delete=models.SET_NULL, null=True)
    employer = models.ForeignKey(Employer, verbose_name='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å, –ø–æ–ª—É—á–∏–≤—à–∏–π –æ—Ç–∑—ã–≤', related_name='received_reviews', on_delete=models.SET_NULL, null=True)
    rate = models.PositiveIntegerField(verbose_name='–û—Ü–µ–Ω–∫–∞', default=5)
    review = models.TextField(verbose_name='–û—Ç–∑—ã–≤ (—Ä—É—Å—Å–∫–∏–π)', blank=True, null=True)
    review_heb = models.TextField(verbose_name='–û—Ç–∑—ã–≤ (–∏–≤—Ä–∏—Ç)', blank=True, null=True)
    is_approved = models.BooleanField(default=None, null=True)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)

    class Meta:
        verbose_name = '–æ—Ç–∑—ã–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞'
        verbose_name_plural = '–æ—Ç–∑—ã–≤—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤'
        ordering = ('-created_at',)
        
    def __str__(self):
        return str(self.rate)
    
    @property
    def readable_approved_status(self):
        if self.is_approved is None:
            return '‚è≥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'

        if self.is_approved is False:
            return '‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω'

        if self.is_approved is True:
            return '‚úÖ –æ–¥–æ–±—Ä–µ–Ω'


class EmployerReview(models.Model):
    employer = models.ForeignKey(Employer, verbose_name='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å, –æ—Å—Ç–∞–≤–∏–≤—à–∏–π –æ—Ç–∑—ã–≤', related_name='leaved_reviews', on_delete=models.SET_NULL, null=True)
    worker = models.ForeignKey(Worker, verbose_name='–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –ø–æ–ª—É—á–∏–≤—à–∏–π –æ—Ç–∑—ã–≤', related_name='received_reviews', on_delete=models.SET_NULL, null=True)
    rate = models.PositiveIntegerField(verbose_name='–û—Ü–µ–Ω–∫–∞', default=5)
    review = models.TextField(verbose_name='–û—Ç–∑—ã–≤ (—Ä—É—Å—Å–∫–∏–π)', blank=True, null=True)
    review_rus = models.TextField(verbose_name='–û—Ç–∑—ã–≤ (–∏–≤—Ä–∏—Ç)', blank=True, null=True)
    is_approved = models.BooleanField(default=None, null=True)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)

    class Meta:
        verbose_name = '–æ—Ç–∑—ã–≤ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è'
        verbose_name_plural = '–æ—Ç–∑—ã–≤—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π'
        ordering = ('-created_at',)
        
    def __str__(self):
        return str(self.rate)

    @property
    def readable_approved_status(self):
        if self.is_approved is None:
            return '‚è≥ ◊ë◊ë◊ì◊ô◊ß◊î'

        if self.is_approved is False:
            return '‚ùå ◊ú◊ê ◊ê◊ï◊©◊®◊î'

        if self.is_approved is True:
            return '‚úÖ ◊ê◊ï◊©◊®◊î'

            
class ChannelForWorkers(models.Model):
    title = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, unique=True)
    tg_id = models.CharField(verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º id', max_length=100, unique=True)
    is_active = models.BooleanField(verbose_name='–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ?', default=True)

    class Meta:
        verbose_name = '–∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤'
        verbose_name_plural = '–∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (—Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏)'
        
    def __str__(self):
        return self.title


class ChannelForEmployers(models.Model):
    title = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, unique=True)
    tg_id = models.CharField(verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º id', max_length=100, unique=True)
    is_active = models.BooleanField(verbose_name='–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ?', default=True)

    class Meta:
        verbose_name = '–∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π'
        verbose_name_plural = '–∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏)'
        
    def __str__(self):
        return self.title


class WorkerCooperationProposal(models.Model):
    worker = models.ForeignKey(Worker, verbose_name='–†–∞–±–æ—Ç–Ω–∏–∫, –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', related_name='outbox_proposals', on_delete=models.CASCADE, null=True)
    employer = models.ForeignKey(Employer, verbose_name='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å, –ø–æ–ª—É—á–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å', related_name='inbox_proposals', on_delete=models.CASCADE, null=True)
    job = models.ForeignKey(Job, verbose_name='–í–∞–∫–∞–Ω—Å–∏—è, –≤—ã–∑–≤–∞–≤—à–∞—è –∑–∞–ø—Ä–æ—Å', related_name='proposals', on_delete=models.CASCADE, null=True)
    is_accepted = models.BooleanField(verbose_name='–ü—Ä–∏–Ω—è—Ç?', default=None, null=True, blank=True)
    is_proceeded = models.BooleanField(verbose_name='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω —á–∞—Ç?', default=False)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)
    updated_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now=True)

    class Meta:
        verbose_name = '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞'
        verbose_name_plural = '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤'
        ordering = ('-updated_at',)

    @property
    def readable_rus_accepted_status(self):
        if self.is_accepted is None:
            return '‚è≥ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞'

        if self.is_accepted is False:
            return '‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω'

        if self.is_accepted is True:
            return '‚úÖ –ø—Ä–∏–Ω—è—Ç (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏)'
    
    @property
    def readable_heb_accepted_status(self):
        if self.is_accepted is None:
            return '‚è≥ ◊û◊û◊™◊ô◊ü ◊ú◊™◊©◊ï◊ë◊î'

        if self.is_accepted is False:
            return '‚ùå ◊†◊ì◊ó◊î'

        if self.is_accepted is True:
            return '‚úÖ ◊î◊™◊ß◊ë◊ú (◊î◊û◊†◊î◊ú ◊ô◊ô◊¶◊ï◊® ◊ê◊ô◊™◊ö ◊ß◊©◊®)'


class EmployerCooperationProposal(models.Model):
    employer = models.ForeignKey(Employer, verbose_name='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', related_name='outbox_proposals', on_delete=models.CASCADE, null=True)
    worker = models.ForeignKey(Worker, verbose_name='–†–∞–±–æ—Ç–Ω–∏–∫, –ø–æ–ª—É—á–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å', related_name='inbox_proposals', on_delete=models.CASCADE, null=True)
    is_accepted = models.BooleanField(verbose_name='–ü—Ä–∏–Ω—è—Ç?', default=None, null=True, blank=True)
    is_proceeded = models.BooleanField(verbose_name='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω —á–∞—Ç?', default=False)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)
    updated_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now=True)

    class Meta:
        verbose_name = '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π'
        verbose_name_plural = '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π'
        ordering = ('-updated_at',)

    @property
    def readable_rus_accepted_status(self):
        if self.is_accepted is None:
            return '‚è≥ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞'

        if self.is_accepted is False:
            return '‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω'

        if self.is_accepted is True:
            return '‚úÖ –ø—Ä–∏–Ω—è—Ç (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏)'
    
    @property
    def readable_heb_accepted_status(self):
        if self.is_accepted is None:
            return '‚è≥ ◊û◊û◊™◊ô◊ü ◊ú◊™◊©◊ï◊ë◊î'

        if self.is_accepted is False:
            return '‚ùå ◊†◊ì◊ó◊î'

        if self.is_accepted is True:
            return '‚úÖ ◊î◊™◊ß◊ë◊ú (◊î◊û◊†◊î◊ú ◊ô◊ô◊¶◊ï◊® ◊ê◊ô◊™◊ö ◊ß◊©◊®)'
